{

	// CSV-X native properties
	"@base" : "http://dadfha.com/csv/", // the base for all @id value (Optional)
    "@prefixes" :
    {
        "ex" : "http://example.org"
    },

	"@id" : "ex1.csvx", // ID of this csv-x schema file which can be IRI. (Required)
	"@targetCSVs" : [ "http://dadfha.com/csv/ex1.csv", "http://dadfha.com/csv/ex2.csv" ], // ID of CSV file(s) this schema is describing. (Optional)
	"@encoding" : "UTF-8", // CSV character encoding, default to UTF-8 if not specified. (Optional)
	"@lang" : "ja",	// The main language of string literals inside the file. Default to "en" if not specified. (Optional)
	//"@spaceIsEmpty" : true, // Meta property to regard cell value with only whitespace characters as empty (a.k.a. null).
		
	"@delimiter" : ",", // Delimited character. Default to "," if not specified. (Optional)
	"@lineSeparator" : "\n", // End of line character. If not specified, the system default new line character should be used. (Optional)
	"@commentPrefix" : "#", // Specify comment symbol for a CSV. (Optional)
	"@quoteChar" : "\"",
	"@skipBlankRows" : true,	
	"@trim" : true,
	
	"@prop[hasMsrDay]" : // a user-defined data property with its unique name written inside the bracket[].
	{ 
		"@name" : "hasMsrDay_prop", // This variable name is independent of property name above.
		"@id" : "ex:hasMsrDay",
		"@datatype" : "xsd:gMonthDay",
		"title_en" : "has measurement day",
		"description" : "a property describing the day observation was made." 
	},
	
	"@prop[title_en]" : 
	{
		"@name" : "title_en_prop",
		"@id" : "ex:title_en",
		"@datatype" : "string",
		"@lang" : "en", // all literal values being described by this property is in the specified language
		"title" : "has title", // isn't it interesting? the property is used to describe itself
		"description" : "a property naming title for anything in English."
	},	

	// Table represents a pattern of schema for a specific set of cells. It defines each cell definition and cells' common properties.
	"@table[myTbl]" :  // It must always have a unique name specified inside the bracket[]. (Required)
	{		
		//"@mapType" : "Dataset",
		"@name" : "myTable", // This variable name is independent of table name above.
		"title" : "{tableTitle}", 
		"title_en" : "Tokyo Air Pollutions Report",

		// (Optional) If defined, the value of all Empty Cells, those parsed in as null, will be replaced with the value, 
		// making all Empty Cells not empty. This is mutually exclusive to '@replaceValueMap' operation, however, is performed after '@spaceIsEmpty'.
		//"@emptyCellFill" : "", 
		
		"@replaceValueMap" : // (Optional) Replace value based on this map. This is done before the validation.
		{
			//"*****" : ""
			//"*****" : null
		},

		"@ignoreValues" : ["*****", null], // These cell values, once found, will be ignored in validation, e.g. [null, ""]. Be warned that, it has priority over 
								// all validations with an exception of dimensional check, any other validations will be missed.
								// For example: ignoring null value will make Empty Cell check to be skipped too. So use this option with caution.
		
		"@commonProps" :
		{
			"hasMsrMonthYear" : "{msrYrMth}",
			"hasMsrLocation" : "{msrLoc}",
			"hasMsrLocationCode" : "{msrLocCode}",
			"hasMsrProperty" : "{msrProp}",
			"hasMsrPropertyCode" : "{msrPropCode}",
			"hasMsrUnit" : "{msrUnit}"		
		},
		
		"@cell[0-2,0]" : 
		{
			// Empty Cell indicates it's a part of the schema but is expected to contain no value at all.
			// (note that an empty string "" within quotes is regarded as having a value).
		},
	
		"@cell[0,1]" : 
		{
			"@name" : "tableTitle",
			"@regex" : "大気環境月報"
		},
	
		"@cell[0,2]" : 
		{
			"@name" : "msrYrMth", // (variable) name of the entity (cell), should conform to QNAME  
			"@regex" : "(平成)(\\d+)(年)(\\d+)(月)"  // Japanese year month format. Ex.平成27年1月
		},
	
		"@cell[1,1]" : 
		{
			"@regex" : "測定場所"	
		},
	
		"@cell[1,2]" : 
		{
			"@name" : "msrLocCode",
			"@regex" : "(\\()(\\d+)(\\))"
		},
	
		"@cell[1,3]" : 
		{
			"@name" : "msrLoc",
			"@regex" : "(.*)"
		},	
	
		"@cell[1,4]" : 
		{
			"@regex" : "項目"	
		},	
	
		"@cell[1,5]" : 
		{
			"@name" : "msrPropCode",
			"@regex" : "(\\()(\\d+)(\\))"
		},
	
		"@cell[1,6]" : 
		{
			"@name" : "msrProp",
			"@regex" : "(.*)"
		},	
	
		"@cell[1,7]" : 
		{
			"@regex" : "単位"
		},
	
		"@cell[1,8]" : 
		{
			"@name" : "msrUnit",
			"@lang" : "en", // Override default @lang
			"@regex" : "(.*)"
		},
	
		"@cell[2,1]" : 
		{
			"@name" : "msrHr1",
			"@regex" : "1時"
		},	
		
		"@cell[2,2]" : 
		{
			"@name" : "msrHr2",
			"@regex" : "2時"
		},	
	
		"@cell[2,3]" : 
		{
			"@name" : "msrHr3",
			"@regex" : "3時"
		},
	
		"@cell[2,4]" : 
		{
			"@name" : "msrHr4",
			"@regex" : "4時"
		},	
	
		"@cell[2,5]" : 
		{
			"@name" : "msrHr5",
			"@regex" : "5時"
		},	
	
		"@cell[2,6]" : 
		{
			"@name" : "msrHr6",
			"@regex" : "6時"
		},	
		
		"@cell[2,7]" : 
		{
			"@name" : "msrHr7",
			"@regex" : "7時"
		},	
	
		"@cell[2,8]" : 
		{
			"@name" : "msrHr8",
			"@regex" : "8時"
		},
	
		"@cell[2,9]" : 
		{
			"@name" : "msrHr9",
			"@regex" : "9時"
		},
	
		"@cell[2,10]" : 
		{
			"@name" : "msrHr10",
			"@regex" : "10時"
		},	
	
		"@cell[2,11]" : 
		{
			"@name" : "msrHr11",
			"@regex" : "11時"
		},	
		
		"@cell[2,12]" : 
		{
			"@name" : "msrHr12",
			"@regex" : "12時"
		},	
	
		"@cell[2,13]" : 
		{
			"@name" : "msrHr13",
			"@regex" : "13時"
		},
	
		"@cell[2,14]" : 
		{
			"@name" : "msrHr14",
			"@regex" : "14時"
		},	
	
		"@cell[2,15]" : 
		{
			"@name" : "msrHr15",
			"@regex" : "15時"
		},	
	
		"@cell[2,16]" : 
		{
			"@name" : "msrHr16",
			"@regex" : "16時"
		},	
		
		"@cell[2,17]" : 
		{
			"@name" : "msrHr17",
			"@regex" : "17時"
		},	
	
		"@cell[2,18]" : 
		{
			"@name" : "msrHr18",
			"@regex" : "18時"
		},
	
		"@cell[2,19]" : 
		{
			"@name" : "msrHr19",
			"@regex" : "19時"
		},	
	
		"@cell[2,20]" : 
		{
			"@name" : "msrHr20",
			"@regex" : "20時"
		},	
	
		"@cell[2,21]" : 
		{
			"@name" : "msrHr21",
			"@regex" : "21時"
		},	
		
		"@cell[2,22]" : 
		{
			"@name" : "msrHr22",
			"@regex" : "22時"
		},	
	
		"@cell[2,23]" : 
		{
			"@name" : "msrHr23",
			"@regex" : "23時"
		},
	
		"@cell[2,24]" : 
		{
			"@name" : "msrHr24",
			"@regex" : "24時"
		},
	
		"@cell[2,25]" : 
		{
			"@regex" : "平均"
		},	
	
		"@cell[2,26]" : 
		{
			"@regex" : "最高"
		},		
	
		"@cell[2,27]" : 
		{
			"@regex" : "最低"
		},	
	
		"@cell[2,28]" : 
		{
			"@regex" : "回数"
		},	
	
		"@cell[2,29]" : 
		{
			"@regex" : "合計"
		},	
	
		"@row[3]" : 
		{
			"@repeatTimes" : -1
		},
		
		"@cell[3,0]" : 
		{
			"@name" : "msrDay{subrow}",
			"@regex" : "(\\d+)(日)"
		},

		"@data[sensor]" : 
		{
			"@name" : "sensor",
			"name" : "{msrProp}Sensor"
		},
	
		// the meta-reference must be in {@this.@value} form to prevent name collision when we want to access other user-defined property which may happen to have the same name with a variable.
		"@cell[3,1-24]" :
		{
			"@name" : "msrDataAtSubrow{subrow}Col{col}",
			//"@mapType" : "Datapoint", // by declaring a type for a cell, we're implicitly saying that this cell's properties will be mapped to target data model
			"@mapTemplate" : "createSensorObs('{sensor.name}', '{msrProp}', 'Atmosphere', '{@this.@value}', '{msrYrMth}{@this.hasMsrDay}{@this.hasMsrHour}')",
			"title_en" : "{msrProp} property measurement value at date/time: {msrYrMth}{msrDay{subrow}}/{msrHr{col}} at location: {msrLoc}",
			"@datatype" : "integer",
			"hasMsrDay" : "{msrDay{subrow}}",
			"hasMsrHour" : "{msrHr{col}}", // former "@cell[2,{col}]",
			"hasMsrVal" : "{@this}" // this is the compact way to associate this cell's value with a property of datapoint, as referring to just a schema entity will be resolved to its @value property.
		},
	
		"@cell[3,25]" :
		{
			//"@mapType" : "Datapoint",			
			"title_en" : "{msrProp} property measurement DAILY AVERAGE value at date: {msrYrMth}{msrDay{subrow}} at location: {msrLoc}",
			"@regex" : "(?:\\d*\\.)?\\d+",
			"@value" : "n/a", // by default cell's value is associated with '@value' property but this value will be used if the cell value is empty (null)
			"hasMsrDay" : "{msrDay{subrow}}"   
		},	
		

		"@cell[3,26]" :
		{		
			"@name" : "dailyMax{subrow}",
			"@datatype" : "integer"		
		},
		
//		"@data[1]" : // an alternative way to declare a data instance of a model (Datapoint). Feature of next version.
//		{
//			//"@mapType" : "Datapoint",
//			"@id" : "ex:{msrYrMth}/{msrDay{subrow}}/{msrProp}dailyMax/",
//			"title_en" : "{msrProp} property measurement DAILY MAXIMUM value at date: {msrYrMth}{msrDay{subrow}} at location: {msrLoc}",
//			"hasMsrDay" : "{msrDay{subrow}}",
//			"hasMsrVal" : "{dailyMax{subrow}}" // by referring to a cell within a repeating row, this data model will be created for all subrow at runtime
//			//"hasMsrVal" : "@cell[3,26]" 
//		},
	
		"@cell[3,27]" : 
		{
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement DAILY MINIMUM value at date: {msrYrMth}{msrDay{subrow}} at location: {msrLoc}",
			"@datatype" : "integer",
			"hasMsrDay" : "{msrDay{subrow}}"
		},
	
		"@cell[3,28]" :
		{
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement DAILY MEASUREMENT TIMES value at date: {msrYrMth}{msrDay{subrow}} at location: {msrLoc}",
			"@datatype" : "integer",
			"hasMsrDay" : "{msrDay{subrow}}"
		},
	
		"@cell[3,29]" : 
		{
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement DAILY TOTAL value at date: {msrYrMth}{msrDay{subrow}} at location: {msrLoc}",
			"@datatype" : "integer",
			"hasMsrDay" : "{msrDay{subrow}}"
		},

		"@cell[4,0]" : 
		{
			"@regex" : "平均"
		},		
	
		"@cell[4,1-24]" :
		{
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY AVERAGE PER HOUR value at month-year/time: {msrYrMth}/{msrHr{col}} at location: {msrLoc}",
			"@datatype" : "integer",
			"hasMsrHour" : "{msrHr{col}}"
		},

		"@cell[4,25]" : 
		{ 
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY AVERAGE value at month-year: {msrYrMth} at location: {msrLoc}",
			"@regex" : "(?:\\d*\\.)?\\d+"
		},

		"@cell[4,26-29]" : {},		

		"@cell[5,0]" : 
		{
			"@regex" : "最高"
		},
	
		"@cell[5,1-24]" : 
		{
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY MAXIMUM PER HOUR value at month-year/time: {msrYrMth}/{msrHr{col}} at location: {msrLoc}",
			"@datatype" : "integer",
			"hasMsrHour" : "{msrHr{col}}"
		},

		"@cell[5,25-29]" : {}, // Duplicate cell definitions will be merged while properties with the same name will be overwritten by definition that come after.

		"@cell[5,26]" : 
		{ 
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY MAXIMUM value at month-year: {msrYrMth} at location: {msrLoc}",
			"@datatype" : "integer"
		},

		"@cell[6,0]" : 
		{
			"@regex" : "最低"
		},	
	
		"@cell[6,1-24]" : 
		{
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY MINIMUM PER HOUR value at month-year/time: {msrYrMth}/{msrHr{col}} at location: {msrLoc}",
			"@datatype" : "integer",
			"hasMsrHour" : "{msrHr{col}}"
		},	

		"@cell[6,25-29]" : {},		

		"@cell[6,27]" : 
		{ 
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY MINIMUM value at month-year: {msrYrMth} at location: {msrLoc}",
			"@datatype" : "integer"
		},				
	
		"@cell[7,0]" : 
		{
			"@regex" : "日数"
		},	

		"@cell[7,1-24]" : 
		{
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY MEASUREMENT TIMES PER HOUR value at month-year/time: {msrYrMth}/{msrHr{col}} at location: {msrLoc}",
			"@datatype" : "integer",
			"hasMsrHour" : "{msrHr{col}}"
		},

		"@cell[7,25-29]" : {},	

		"@cell[7,28]" : 
		{ 
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY MEASUREMENT TIMES value at month-year: {msrYrMth} at location: {msrLoc}",
			"@datatype" : "integer"
		},		

		"@cell[8,0]" : 
		{
			"@regex" : "合計"
		},		
	
		"@cell[8,1-24]" : 
		{
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY TOTAL PER HOUR value at month-year/time: {msrYrMth}/{msrHr{col}} at location: {msrLoc}",
			"@datatype" : "integer",
			"hasMsrHour" : "{msrHr{col}}"
		},		

		"@cell[8,25-28]" : {},
	
		"@cell[8,29]" : 
		{ 
			//"@mapType" : "Datapoint",
			"title" : "{msrProp} property measurement MONTHLY TOTAL value at month-year: {msrYrMth} at location: {msrLoc}",
			"@datatype" : "integer"
		}

	},
	
	"@table[WindMsrTbl]" : 
	{
		//"@mapType" : "Dataset",
		"@name" : "WindMsrTbl",
		"title_en" : "Tokyo Monthly Environment Measurement (Wind)",
		"title" : "{tableTitle_wind}",
		
		"@commonProps" : 
		{
			"hasMsrProperty" : "{msrProp_wind}",
			"hasMsrPropertyCode" : "{msrPropCode_wind}",
			"hasMsrLocation" : "{msrLoc_wind}",
			"hasMsrLocationCode" : "{msrLocCode_wind}",
			"hasMsrMonthYear" : "{msrYrMth_wind}"
		},
				
		"@cell[0-2,0]" : {},
		
		"@cell[0,1]" : 
		{
			"@name" : "tableTitle_wind",
			"@regex" : "大気環境月報"
		},
		
		"@cell[0,2]" : 
		{
			"@name" : "msrYrMth_wind",
			"@regex" : "(平成)(\\d+)(年)(\\d+)(月)"
		},
		
		"@cell[1,1]" :
		{
			"@regex" : "測定場所"
		},
		
		"@cell[1,2]" : 
		{
			"@name" : "msrLocCode_wind",
			"@regex" : "(\\()(\\d+)(\\))" 
		},
		
		"@cell[1,3]" :
		{
			"@name" : "msrLoc_wind",
			"@regex" : "(.*)"
		},
		
		"@cell[1,4]" :
		{
			"@regex" : "項目"
		},
		
		"@cell[1,5]" :
		{
			"@name" :  "msrPropCode_wind",
			"@regex" : "(\\()(\\d+)(\\))"
		},
		
		"@cell[1,6]" :
		{
			"@name" :  "msrProp_wind",
			"@regex" : "風向"
		},

		"@cell[1,7]" : {},		
		
		"@cell[2,1]" :
		{
			"@name" : "msrHr{col}_wind", // {row},{col},{subrow} are special context vars. var has to be resolved at csv parsing time to declare var.
			"@regex" : "1時"
		},
		
		"@cell[2,2]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "2時"
		},
		
		"@cell[2,3]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "3時"
		},		
		
		"@cell[2,4]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "4時"
		},		
		
		"@cell[2,5]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "5時"
		},		
		
		"@cell[2,6]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "6時"
		},		
		
		"@cell[2,7]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "7時"
		},		
		
		"@cell[2,8]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "8時"
		},		
		
		"@cell[2,9]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "9時"
		},		
		
		"@cell[2,10]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "10時"
		},		
		
		"@cell[2,11]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "11時"
		},		
		
		"@cell[2,12]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "12時"
		},		
		
		"@cell[2,13]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "13時"
		},		
		
		"@cell[2,14]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "14時"
		},		
		
		"@cell[2,15]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "15時"
		},		
		
		"@cell[2,16]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "16時"
		},		
		
		"@cell[2,17]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "17時"
		},		
		
		"@cell[2,18]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "18時"
		},		
		
		"@cell[2,19]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "19時"
		},		
		
		"@cell[2,20]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "20時"
		},		
		
		"@cell[2,21]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "21時"
		},		
		
		"@cell[2,22]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "22時"
		},		
		
		"@cell[2,23]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "23時"
		},		
		
		"@cell[2,24]" :
		{
			"@name" : "msrHr{col}_wind",
			"@regex" : "24時"
		},	
		
		"@cell[2,25]" :
		{
			"@regex" : "平均"
		},			
		
		"@cell[2,26]" :
		{
			"@regex" : "最高"
		},
		
		"@cell[2,27]" :
		{
			"@regex" : "最低"
		},		
		
		"@cell[2,28]" :
		{
			"@regex" : "回数"
		},
		
		"@cell[2,29]" :
		{
			"@regex" : "合計"
		},		
		
		"@row[3]" :
		{
			"@repeatTimes" : -1
		},
		
		// Variable name of cells in repeating row must have 'subrow' variable in the name.
		// The same principle is also applied to spanned row/column by using 'row' and 'col' 
		// to address a specific row/column being processed. 
		"@cell[3,0]" :
		{
			"@name" : "msrDay{subrow}_wind",  
			"@regex" : "(\\d+)(日)"
		},
		
		"@cell[3,1-24]" :
		{
			//"@mapType" : "Datapoint",
			"@regex" : "NNW|NNE|NW|NE|N|ENE|ESE|E|SSE|SSW|SE|SW|S|WNW|WSW|W|C",
			"title_en" : "Measurement of {msrProp_wind} at {msrLoc_wind} on {msrDay{subrow}_wind}{msrYrMth_wind} {msrHr{col}_wind}",
			"hasMsrHour" : "{msrHr{col}_wind}",
			"hasMsrDay" : "{msrDay{subrow}_wind}",
			"hasMsrVal" : "{@this}"
		},
		
		"@cell[3,25-27]" : {},
		
		"@cell[3,28]" : 
		{
			//"@mapType" : "Datapoint",
			"@datatype" : "integer",			
			"title_en" : "Measurement times in the day.",
			"hasMsrDay" : "{msrDay{subrow}_wind}"	
		},
		
		"@cell[3,29]" : {},
		
		"@cell[4,0]" : 
		{
			"@regex" : "風向"
		},
		
		"@cell[4,1]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "NNE"
		},
		
		"@cell[4,2]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "NE"
		},
		
		"@cell[4,3]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "ENE"
		},		
		
		"@cell[4,4]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "E"
		},		
		
		"@cell[4,5]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "ESE"
		},
		
		"@cell[4,6]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "SE"
		},	
		
		"@cell[4,7]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "SSE"
		},						
		
		"@cell[4,8]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "S"
		},
		
		"@cell[4,9]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "SSW"
		},
		
		"@cell[4,10]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "SW"
		},
		
		"@cell[4,11]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "WSW"
		},
		
		"@cell[4,12]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "W"
		},
		
		"@cell[4,13]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "WNW"
		},
		
		"@cell[4,14]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "NW"
		},
		
		"@cell[4,15]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "NNW"
		},
		
		"@cell[4,16]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "N"
		},
		
		"@cell[4,17]" :
		{
			"@name" : "windDir{col}",
			"@regex" : "C"
		},
		
		"@cell[4,18-25]" : {},							
		
		"@cell[5,0]" : 
		{
			"@regex" : "頻度",
			"title_en" : "Frequency"
		},
		
		"@cell[5,1-17]" : 
		{
			//"@mapType" : "Datapoint",
			"@datatype" : "integer",
			"title_en" : "Frequency of wind direction {windDir{col}} in the {msrYrMth_wind}.",
			"ofWindDirection" : "{windDir{col}}" 
			//"ofWindDirection" : "@cell[4,{col}]" 
		},
		
		"@cell[5,18-25]" : {},	
		
		"@cell[6,0]" :
		{
			"@regex" : "割合",
			"title_en" : "Percentage"
		},
		
		"@cell[6,1-17]" :
		{
			//"@mapType" : "Datapoint",
			"@datatype" : "double",
			"title_en" : "Percentage of wind direction {windDir{col}} in the {msrYrMth_wind}.",
			"ofWindDirection" : "{windDir{col}}" 
		},
		
		"@cell[6,18-25]" : {},	
		
		"@cell[7,0]" : 
		{
			"@regex" : "日数"
		},	
		
		"@cell[7,1-24]" :
		{
			//"@mapType" : "Datapoint",
			"@datatype" : "integer",
			"title_en" : "Measurement days at {msrHr{col}_wind} in {msrYrMth_wind}",
			"ofMsrHour" :  "{msrHr{col}_wind}"
		},
		
		"@cell[7,25-27]" : {},
		
		"@cell[7,28]" : 
		{
			//"@mapType" : "Datapoint",
			"@datatype" : "integer",
			"title_en" : "Total number of measurement days in {msrYrMth_wind}"
		},
		
		"@cell[7,29]" : {},
		
		"@cell[8,0]" :
		{
			"@regex" : "合計"
		},
		
		"@cell[8,1-24]" : {}
		
	}, // end of wind direction table

    // it's possible to express a whole RDF template using RDF itself, but that'd limit the readability
    // though it'll have a good portability via client already know how to parse in RDF

    // however, we want numbers of templates to be mainly embedded in a CSV-X schema file
    // it'll be more convenient to be able to describe a template within the file.

    // there may be needs in the future to introduce new features to the template, 
    // which may demand more specific syntax, custom for the purpose, ex. repeating construct like foreach
    // in which case, it's still also embeddable in JSON as string (with escape chars as need)

    // therefore, let's try JSON-based first to benefit from portability, simplicity-readability (over XML, ttl, etc.)
    // until a specific need arises 


    "@template[ttlHeaders]" : 
    {
    	"@ttl" :
			"
            # the meta-directives shoukd be defined as per schema

            @prefix : <http://www.dadfha.com/ont/ex#> .
            @prefix ssn: <http://purl.oclc.org/NET/ssnx/ssn> .
            @prefix DUL: <http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#> .
            @prefix qu <http://www.omgwiki.org/SysML-QUDV-SI.owl#> .
            @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
            @base <http://www.dadfha.com/ont/ex> .				
			"
    },

    // created in accordance to guide in http://www.w3.org/2005/Incubator/ssn/XGR-ssn-20110628/
    "@template[createSensorDesc]" : 
    {
        "@params" : [ "sensor", "msrCap", "property", "unit", "frequency", "precision", "location"],

        "description" : "Declare a sensor with its measuremnet properties.",

        "@ttl" : 
            "
            :{sensor} rdf:type ssn:SensingDevice ;
            ssn:observes :{property} ;
            ssn:onPlatform ?plat1 ;
            ssn:hasMeasurementCapability :{msrCap} .

            # define measurement property
            :{property} rdf:type ssn:Property ;
            rdf:type qu:QuantityKind ;
            qu:unitKind :{unit} .
            :{unit} rdf:type qu:Unit .

            # measurement properties
            :{msrCap} ssn:hasMeasurementProperty ?f1, ?p1 .

            ?f1 rdf:type ssn:Frequency ;
            ssn:hasValue ?freqPropVal .
            ?freqPropVal rdf:type DUL:Amount ;
            DUL:isClassifiedBy :timesPerDay ;
            DUL:hasDataValue {frequency} .
            :timesPerDay rdf:type DUL:UnitOfMeasure .
            
            ?p1 rdf:type ssn:Precision ;
            ssn:hasValue ?precPropVal .
            ?precPropVal rdf:type DUL:Amount ;
            DUL:hasDataValue {precision} .

            # sensor platform location
            ?plat1 rdf:type ssn:Platform ;
            DUL:hasLocation {location} .
            {location} rdf:type DUL:PhysicalPlace .                
            "

    }, 

    "@template[createSensorObs]" : 
    {
        "@params" : [ "sensor", "property", "feature", "value", "time" ],

        "description" : "Template for each sensor observation.",

        "@ttl" : 
            "
            ?o rdf:type ssn:Observation ;
            ssn:observedBy {sensor} ;
            ssn:featureOfInterest {feature} ;
            ssn:observedProperty {property} ;
            ssn:observationSamplingTime {time} ;
            ssn:observationResult ?so .

            {property} ssn:isPropertyOf {feature} .

            # express value
            ?so rdf:type ssn:SensorOutput ;
            ?so ssn:isProducedBy {sensor} ;
            ssn:hasValue ?obsVal .
            ?obsVal rdf:type ssn:ObservationValue ;
            ?obsVal DUL:hasDataValue {value} .

            # if a sensor type define a specific property type to observe in the ontology, 
            # this statement can help in verifying inconsistency in annotating 
            # a sensor type for wrong property type.

            {sensor} ssn:observes {property} .
            "
    }


} // end of schema

